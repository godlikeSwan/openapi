openapi: 3.0.3
info:
  title: REST API
  version: 0.0.14
paths:
  /:
    get:
      tags: ['page']
      summary: Одностраничное приложение проекта =)
      operationId: getMainPage
      responses:
        200:
          summary: Сайт проекта
          content:
            text/html:
              schema:
                $ref: '#components/schemas/BasicHTML'
  /u/{userId}:
    get:
      deprecated: true
      tags: ['page']
      summary: Страница-визитка пользователя
      operationId: getUserPage
      parameters:
      - name: userId
        in: path
        description: Идентификатор пользователя, чью страницу выводить
        required: true
        schema:
          type: string
        example: 0
      responses:
        200:
          description: Страница-визитка пользователя
          content:
            text/html:
              schema:
                $ref: '#components/schemas/BasicHTML'
  /t/{teamId}:
    get:
      deprecated: true
      tags: ['page']
      summary: Страница-визитка команды
      operationId: getTeamPage
      parameters:
      - name: teamId
        in: path
        description: Идентификатор команды
        required: true
        schema:
          type: string
        example: 0
      responses:
        200:
          description: Страница-визитка команды
          content:
            text/html:
              schema:
                $ref: '#components/schemas/BasicHTML'
  /api/oauth2/authorization/yandex:
    get:
      tags: ['page']
      summary: Перенаправление на страницу авторизации
      operationId: redirectToAuthPage
      responses:
        302:
          description: Редирект на страницу авторизации
  /api/u/{alias}:
    get:
      tags: ['alias']
      summary: Получить данные о пользователе
      operationId: getUserByAlias
      parameters:
      - name: alias
        in: path
        description: Альяс пользователя
        required: true
        schema:
          type: string
        example: helloItsMe
      responses:
        200:
          description: Данные о пользователе успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Пользователь не найден
  /api/me:
    get:
      tags: ['user']
      summary: Получить данные о пользователе
      operationId: getUser
      parameters:
      - $ref: '#/components/parameters/AuthParam'
      responses:
        200:
          description: Данные о пользователе успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Пользователь не найден
    put:
      summary: Изменить данные о пользователе
      tags: ['user']
      operationId: putUser
      parameters:
      - $ref: '#/components/parameters/AuthParam'
      requestBody:
        description: Новые данные
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Данные о пользователе успешно изменены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Пользователь не найден
        403:
          description: Нет прав на изменение
    delete:
      summary: Удалить данные пользователя
      tags: ['user']
      operationId: deleteUser
      parameters:
      - $ref: '#/components/parameters/AuthParam'
      responses:
        200:
          description: Данные о пользователе успешно удалены
        404:
          description: Пользователь не найден
        403:
          description: Нет прав на удаление
  # Профиль команды
  /api/t/{alias}:
    get:
      tags: ['alias']
      summary: Получить данные о команде
      operationId: getTeamByAlias
      parameters:
      - name: alias
        in: path
        description: Альяс команды
        required: true
        schema:
          type: string
        example: helloItsWe
      responses:
        200:
          description: Данные о команде успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        404:
          description: Пользователь не найден
  /api/team/{teamId}:
    get:
      summary: Получить данные о команде
      tags: ['team']
      operationId: getTeam
      parameters:
      - $ref: '#/components/parameters/AuthParam'
      - name: teamId
        in: path # | cookie | header | query
        description: Идентификатор команды
        required: true
        schema:
          type: string
        example: 0
      responses:
        200:
          description: Данные о команде успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        404:
          description: Команда не найдена
    patch:
      summary: Обновить освновную информацию о команде
      tags: ['team']
      operationId: patchTeam
      parameters:
      - $ref: '#/components/parameters/AuthParam'
      - name: teamId
        in: path # | cookie | header | query
        description: Идентификатор команды
        required: true
        schema:
          type: string
        example: 0
      requestBody:
        description: Новые данные о команде
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequestDto'
      responses:
        200:
            description: Данные успешно обновлены
        404:
            description: Команда не найдена
  /api/team:
    post:
      summary: Создать новую команду без участников
      tags: ['team']
      operationId: postTeam
      parameters:
      - $ref: '#/components/parameters/AuthParam'
      requestBody:
        description: Основные данные о новой команде
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequestDto'
      responses:
        200:
          description: Данные о команде успешно изменены
        404:
          description: Команда не найдена
        403:
          description: Нет прав на изменение
  /api/team/{teamId}/delete/{userId}:
    patch:
      summary: Удалить userId из команды с teamId
      tags: ['team']
      operationId: deleteUserFromTeam
      parameters:
      - $ref: '#/components/parameters/AuthParam'
      - name: teamId
        in: path # | cookie | header | query
        description: Идентификатор команды
        required: true
        schema:
          type: string
        example: 3
      - name: userId
        in: path # | cookie | header | query
        description: Идентификатор пользователя
        required: true
        schema:
          type: string
        example: 8
      responses:
        200:
          description: Пользователь успешно удален из команды
  /api/team/{teamId}/add:
    get:
      summary: Добавить текущего авторизированного пользователя к команде teamId
      tags: ['team']
      operationId: addUserToTeam
      parameters:
      - $ref: '#/components/parameters/AuthParam'
      - name: teamId
        in: path # | cookie | header | query
        description: Идентификатор команды
        required: true
        schema:
          type: string
        example: 3
      responses:
        200:
          description: Пользователь успешно добавлен к команде
  /api/mail/send:
    patch:
      summary: Отправить приглашение в команду
      tags: ['mail']
      operationId: sendEmail
      parameters:
      - $ref: '#/components/parameters/AuthParam'
      requestBody:
        description: Почта, на которую отправить приглашение и teamId команды, в которую хотим пригласить
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailRequestDto'
      responses:
        200:
          description: Приглашение успешно отправлено
        400:
          description: Неверные параметры запроса / Ошибка отправления
  /api/v1/files:
    post:
      tags:
        - files
      summary: Upload a File
      operationId: fileUpload
      parameters:
        - name: mediaType
          in: query
          description: 'Enter media type: json or hal. (Default: json, hal = "application/hal+json" with link)'
          required: false
          schema:
            type: string
            default: json
            enum:
              - hal
              - json
              - xml
          example: hal
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/FileResponse'
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/files/{file}/detail:
    get:
      deprecated: true
      tags:
        - files
      summary: Get File Detail
      operationId: getFileDetail
      parameters:
        - name: file
          in: path
          required: true
          schema:
            type: string
        - name: mediaType
          in: query
          description: 'Enter media type: json or hal. (Default: json, hal = "application/hal+json" with link)'
          required: false
          schema:
            type: string
            default: json
            enum:
              - hal
              - json
              - xml
          example: hal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/FileResponse'
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/files/view/{file}:
    get:
      tags:
        - files
      summary: View a File
      operationId: viewFile
      parameters:
        - name: file
          in: path
          required: true
          schema:
            type: string
        - name: mediaType
          in: query
          description: 'Enter media type: json or hal. (Default: json, hal = "application/hal+json" with link)'
          required: false
          schema:
            type: string
            default: json
            enum:
              - hal
              - json
              - xml
          example: hal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
                format: binary
            application/hal+json:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/files/download/{file}:
    deprecated: true
    get:
      tags:
        - files
      summary: Download a File
      operationId: downloadFile
      parameters:
        - name: file
          in: path
          required: true
          schema:
            type: string
        - name: mediaType
          in: query
          description: 'Enter media type: json or hal. (Default: json, hal = "application/hal+json" with link)'
          required: false
          schema:
            type: string
            default: json
            enum:
              - hal
              - json
              - xml
          example: hal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
                format: binary
            application/hal+json:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/files/{file}:
    delete:
      deprecated: true
      tags:
        - files
      summary: Delete a File
      operationId: removeFile
      parameters:
        - name: file
          in: path
          required: true
          schema:
            type: string
        - name: mediaType
          in: query
          description: 'Enter media type: json or hal. (Default: json, hal = "application/hal+json" with link)'
          required: false
          schema:
            type: string
            default: json
            enum:
              - hal
              - json
              - xml
          example: hal
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
            application/hal+json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
  # Админка
  #/admin:
  #  get:
  #    summary: Страница админки
  #    operationId: getAdminPage
  #    responses:
  #      200:
  #        description: Страница админки
  #        content: text/html
  # /api/admin/auth:
  # /api/admin/users:
  # /api/admin/user/{user}:
  # /api/admin/teams:
  # /api/admin/team/{team}:
servers:
- url: http://localhost
  description: local testing server
components:
  parameters:
    AuthParam:
      in: cookie
      name: JSESSIONID
      required: true
      description: Идентификатор сессии
      schema:
        type: string
      example: 5873C894648266626A0766476D4BEE63
    TeamParam:
      name: teamId
      in: path # | cookie | header | query
      description: Идентификатор команды
      required: true
      schema:
        type: string
      example: d0adf
  schemas:
    User:
      description: Данные пользователя
      type: object
      properties:
        id:
          type: string
        metrikaId:
          type: string
        alias:
          type: string
        # Moved to contacts
        # email:
        #   type: string
        profilePicture:
          type: string
        email:
          type: string
        name:
          type: string
        surname:
          type: string
        position: # Должность
          type: string
        product:
          type: string # | array
        description: # О себе
          type: string
        events: # Участвовал
          type: array
          items:
            # Скорее всего, нужно будет сделать объект, а не строку
            # (указать ссылку, если есть)
            type: string
        contacts:
          type: array
          items:
            # И тут тоже =) (нужно указать площадку куда ведёт)
            type: string
      example:
        id: 0
        alias: helloItsMe
        profilePicture: 'https://avatarki.ru/dfaff'
        email: 'email@example.com'
        name: Иван
        surname: Иванов
        position: Программист
        product: Программа
        description: |
          Люблю котиков
        events:
        - Хакатон
        - Конференция
        contacts:
        - mail@example.com
        - '@twitter'
        - я на github
    UserIn:
      description: Данные пользователя
      type: object
      properties:
        metrikaId:
          type: string
        alias:
          type: string
        profilePicture:
          type: string
        name:
          type: string
        surname:
          type: string
        position: # Должность
          type: string
        product:
          type: string # | array
        description: # О себе
          type: string
        events: # Участвовал
          type: array
          items:
            # Скорее всего, нужно будет сделать объект, а не строку
            # (указать ссылку, если есть)
            type: string
        contacts:
          type: array
          items:
            # И тут тоже =) (нужно указать площадку куда ведёт)
            type: string
      example:
        alias: helloItsMe
        profilePicture: 'https://avatarki.ru/dfaff'
        name: Иван
        surname: Иванов
        position: Программист
        product: Программа
        description: |
          Люблю котиков
        events:
        - Хакатон
        - Конференция
        contacts:
        - mail@example.com
        - '@twitter'
        - я на github
    TeamRequestDto:
      description: Данные команды
      type: object
      properties:
        name:
          type: string
        product:
          type: string
        alias:
          type: string # | array
        description: # | about
          type: string
      example:
        name: Never gonna give Ya Up
        product: 'Яндекс стартаперы'
        alias: re7De
        description: Мы делаем дела, когда дела не делаются
    MailRequestDto:
      description: Данные
      type: object
      properties:
        teamId:
          type: integer
        email:
          type: string
      example:
        teamId: 5
        email: qwerty@yandex.ru
    Team:
      description: Данные команды
      type: object
      properties:
        id:
          type: string
        teamPicture:
          type: string
        name:
          type: string
        product:
          type: string # | array
        description: # | about
          type: string
        members:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              surname:
                type: string
              position:
                type: string
      example:
        name: Программисты
        product: 'Яндекс Go'
        alias: re7De
        description: Типо описание
        members:
        - id: 0
          profilePicture: url какой-то
          name: Никита
          surname: Иванов
          email: qwerty@mail.ru
          position: Программист
          product: Яндекс Такси
          description: Люблю котиков
          alias: eh8Wk
          events:
          - свадьба
          - хакатон
          contacts:
          - http://wqerwqr
          - youtube/rerrrw
        - id: 1
          profilePicture: http://photolibrary/1.png
          name: Петя
          surname: Кердановский
          email: qwerty124@mail.ru
          position: Программист
          product: Яндекс Такси
          description: Люблю котиков
          alias: sg4rl
          events:
          - свадьба
          - хакатон
          contacts:
          - http://wqerwqr
          - youtube/rerrrw
    TeamIn:
      description: Новые данные команды
      type: object
      properties:
        id:
          type: string
        teamPicture:
          type: string
        name:
          type: string
        product:
          type: string # | array
        description: # | about
          type: string
        members:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
      example:
        id: 0
        teamPicture: 'https://avatarki.ru/dfafasf'
        name: Программисты
        position: Программа
        description: |
          Любим котиков
        members:
        - id: 0
        - id: 2
    BasicHTML:
      type: string
      expmple: |
                <!DOCTYPE html>
                <html lang="ru">
                ...
    ApiError:
      type: object
      properties:
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        path:
          type: string
    FileResponse:
      type: object
      properties:
        filename:
          type: string
        contentType:
          type: string
        fileSize:
          type: integer
          format: int64
        createdTime:
          type: string
          format: date-time
        _links:
          $ref: '#/components/schemas/Links'
    Links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Link'
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
